// AuditPage.tsx
import { useState, ChangeEvent } from "react";
import { Transaction } from "@mysten/sui/transactions";
import { Button, Container, Flex, Heading, Text } from "@radix-ui/themes";
import { useSignAndExecuteTransaction, useSuiClient } from "@mysten/dapp-kit";
import ClipLoader from "react-spinners/ClipLoader";
import { toast } from "react-toastify";
import { jsPDF } from "jspdf";

// Simple PDF Viewer component defined inline (or you can separate it into its own file)
function PDFViewer({ url }: { url: string }) {
  return (
    <div style={{ width: "100%", height: "600px", border: "1px solid #ccc" }}>
      <iframe src={url} width="100%" height="100%" title="PDF Viewer" />
    </div>
  );
}

// Define the shape for each audit input item.
type AuditItem = {
  id: number;
  file: File | null;
  text: string;
  fileName: string;
};

export function AuditPage() {
  // State for audit input items.
  const [auditItems, setAuditItems] = useState<AuditItem[]>([
    { id: Date.now(), file: null, text: "", fileName: "" },
  ]);
  const [submitting, setSubmitting] = useState<boolean>(false);
  const [pdfUrl, setPdfUrl] = useState<string>("");

  // Fallback state for manual audit report entry.
  const [fallbackMode, setFallbackMode] = useState<boolean>(false);
  const [manualAuditReport, setManualAuditReport] = useState<string>("");

  // NFT Minting settings.
  const nftPackageId =
    "0x0d865f8b0ca4c353fbc142af6b74d88c4ec49d28c970b58c48b5599e1d314914"; // Replace with your actual package ID.
  const suiClient = useSuiClient();
  const { mutate: mintSignAndExecute } = useSignAndExecuteTransaction({
    execute: async ({ bytes, signature }) =>
      await suiClient.executeTransactionBlock({
        transactionBlock: bytes,
        signature,
        options: {
          showRawEffects: true,
          showEffects: true,
        },
      }),
  });
  const [mintLoading, setMintLoading] = useState<boolean>(false);
  const [mintTxResponse, setMintTxResponse] = useState<any>(null);
  const [mintError, setMintError] = useState<string>("");

  // Inline helper: update an audit item.
  const updateAuditItem = (id: number, field: keyof AuditItem, value: any) => {
    setAuditItems((prev) =>
      prev.map((item) => (item.id === id ? { ...item, [field]: value } : item))
    );
  };

  // Inline handlers for file and text changes.
  const handleFileChange = (id: number) => (
    e: ChangeEvent<HTMLInputElement>
  ) => {
    const file = e.target.files ? e.target.files[0] : null;
    updateAuditItem(id, "file", file);
  };

  const handleInputChange = (id: number, field: keyof AuditItem) => (
    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    updateAuditItem(id, field, e.target.value);
  };

  // Add a new audit item row.
  const addAuditItem = () => {
    setAuditItems((prev) => [
      ...prev,
      { id: Date.now(), file: null, text: "", fileName: "" },
    ]);
  };

  // Call your audit API (using OpenAI) – if it fails, we fall back to manual input.
  async function callAuditAPI(auditItems: AuditItem[]): Promise<string> {
    // Replace the code below with your actual API call.
    // IMPORTANT: The API key here should never be exposed in production; use a secured backend.
    const apiKey =
      "";
    const promptParts: string[] = [];

    for (const item of auditItems) {
      if (item.file) {
        const fileText = await item.file.text();
        promptParts.push(`Filename: ${item.fileName || item.file.name}\n${fileText}`);
      }
      if (item.text.trim()) {
        promptParts.push(`Manual Input:\n${item.text}`);
      }
    }

    const prompt = `You're an expert smart contract auditor. Analyze the following Move code snippets and provide a security-focused audit report. Include vulnerabilities, recommendations, and a short summary.\n\n${promptParts.join(
      "\n\n---\n\n"
    )}`;

    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${apiKey}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "gpt-3.5-turbo",
          messages: [
            { role: "system", content: "You are a smart contract security auditor." },
            { role: "user", content: prompt },
          ],
          temperature: 0.4,
        }),
      });

      const data = await response.json();
      if (!response.ok) {
        throw new Error(data.error?.message || "Failed to call OpenAI");
      }
      return data.choices[0].message.content;
    } catch (error) {
      // Instead of failing, we enable fallback mode so manual entry can be used.
      setFallbackMode(true);
      throw new Error("Audit API call failed. Please enter your audit report manually.");
    }
  }

  // Generate a PDF Blob from audit report text using jsPDF.
  function generatePDF(report: string): Blob {
    const doc = new jsPDF();
    doc.text(report, 10, 10);
    return doc.output("blob");
  }

  // Inline function to upload our PDF Blob to Pinata.
  async function uploadToIPFSWithPinata(file: Blob): Promise<string> {
    const pinataApiKey = "2ba7bb21d6984f6781a8";       // Replace with your Pinata API key
    const pinataSecretApiKey = "5d728ced44197f09903fdaf628b623d7aa3c8f5ddaa0af8cac104e4b20d35c6e"; // Replace with your Pinata API secret
    const url = "https://api.pinata.cloud/pinning/pinFileToIPFS";
  
    const fileToUpload = new File([file], "audit-report.pdf", { type: file.type });
    const formData = new FormData();
    formData.append("file", fileToUpload);
    // Optional metadata
    const metadata = JSON.stringify({ name: "Audit Report PDF" });
    formData.append("pinataMetadata", metadata);
  
    const response = await fetch(url, {
      method: "POST",
      body: formData,
      headers: {
        pinata_api_key: pinataApiKey,
        pinata_secret_api_key: pinataSecretApiKey,
      },
    });
  
    const data = await response.json();
  
    if (!response.ok) {
      // Stringify the error object for a more helpful error message.
      throw new Error(
        typeof data.error === "object" ? JSON.stringify(data.error) : data.error || "Failed to upload to Pinata"
      );
    }
    return `https://gateway.pinata.cloud/ipfs/${data.IpfsHash}`;
  }

  // Handle audit submission: call backend API, generate PDF, and upload to IPFS.
  const handleSubmitAudit = async () => {
    setSubmitting(true);
    try {
      const auditReport = await callAuditAPI(auditItems);
      toast.info("Audit report generated.");
      const pdfBlob = generatePDF(auditReport);
      // Upload the PDF to IPFS via Pinata.
      const generatedPdfUrl = await uploadToIPFSWithPinata(pdfBlob);
      setPdfUrl(generatedPdfUrl);
      toast.success("Audit PDF pinned to IPFS via Pinata!");
    } catch (err: any) {
      console.error(err);
      toast.error(err.message || "Failed to generate audit report!");
    }
    setSubmitting(false);
  };

  // Handle manual audit submission if API fails.
  const handleManualAuditSubmit = async () => {
    if (!manualAuditReport.trim()) {
      toast.error("Please enter your audit report text manually.");
      return;
    }
    try {
      const pdfBlob = generatePDF(manualAuditReport);
      const generatedPdfUrl = await uploadToIPFSWithPinata(pdfBlob);
      setPdfUrl(generatedPdfUrl);
      toast.success("Manual audit PDF pinned to IPFS via Pinata!");
      // Disable fallback mode once manual audit is submitted.
      setFallbackMode(false);
    } catch (err: any) {
      console.error(err);
      toast.error(err.message || "Failed to upload manual audit report.");
    }
  };

  // Mint NFT using the PDF URL as proof of audit.
  const mintNFT = () => {
    if (!pdfUrl) {
      toast.error("No PDF URL available to mint NFT.");
      return;
    }
    setMintLoading(true);
    const tx = new Transaction();
    tx.moveCall({
      target: `${nftPackageId}::nft::mint_to_sender`,
      arguments: [tx.pure.string(("Audit Report")), // NFT name
        tx.pure.string(("Audit Report Description")), // NFT description
        tx.pure.string(pdfUrl)],
      typeArguments: [],
    });
    mintSignAndExecute(
      { transaction: tx },
      {
        onSuccess: (result) => {
          setMintTxResponse(result);
          toast.success("NFT minted successfully!");
          setMintLoading(false);
        },
        onError: (err: any) => {
          const msg = err.message || "Minting NFT failed";
          setMintError(msg);
          toast.error(msg);
          setMintLoading(false);
        },
      }
    );
  };

  return (
    <Container>
      <Heading>Audit Page</Heading>
      <Text mt="2">
        Upload files and/or paste text – you can add multiple inputs.
      </Text>
      {auditItems.map((item) => (
        <Flex
          key={item.id}
          direction="column"
          gap="2"
          style={{
            marginBottom: "20px",
            padding: "10px",
            border: "1px solid #ccc",
            borderRadius: "4px",
          }}
        >
          <input
            placeholder="File Name"
            value={item.fileName}
            onChange={handleInputChange(item.id, "fileName")}
          />
          <input type="file" onChange={handleFileChange(item.id)} />
          <textarea
            placeholder="Or paste your text here"
            value={item.text}
            onChange={handleInputChange(item.id, "text")}
            style={{ width: "100%", height: "100px" }}
          />
        </Flex>
      ))}
      <Button onClick={addAuditItem} mt="3">
        + Add More
      </Button>
      <Button onClick={handleSubmitAudit} disabled={submitting} mt="3">
        {submitting ? <ClipLoader size={20} /> : "Submit Audit"}
      </Button>

      {/* If fallback mode is active and no PDF has been generated, show a manual audit form */}
      {fallbackMode && !pdfUrl && (
        <Container mt="4">
          <Heading as="h4" mb="2">
            Enter Audit Report Manually
          </Heading>
          <textarea
            value={manualAuditReport}
            onChange={(e) => setManualAuditReport(e.target.value)}
            style={{ width: "100%", height: "150px" }}
            placeholder="Enter your audit report here..."
          />
          <Button onClick={handleManualAuditSubmit} mt="2">
            Submit Manual Audit
          </Button>
        </Container>
      )}

      {pdfUrl && (
        <Container mt="4">
          <Heading as="h4" mb="2">
            Audit Report PDF
          </Heading>
          <PDFViewer url={pdfUrl} />
          <Button onClick={mintNFT} disabled={mintLoading} mt="2">
            {mintLoading ? <ClipLoader size={20} /> : "Mint NFT Certificate"}
          </Button>
        </Container>
      )}
      {mintTxResponse && (
        <Text size="2" mt="2">
          NFT Transaction Response:
          <pre>{JSON.stringify(mintTxResponse, null, 2)}</pre>
        </Text>
      )}
      {mintError && (
        <Text color="red" size="2" mt="2">
          NFT Error: {mintError}
        </Text>
      )}
    </Container>
  );
}

export default AuditPage;

